1. Check Disarium Number
A Disarium number is a number where the sum of its digits powered with their respective position equals the number itself.


def is_disarium(num):
    digits = str(num)
    total = sum(int(digit) ** (i + 1) for i, digit in enumerate(digits))
    return total == num

num = int(input("Enter a number: "))
if is_disarium(num):
    print(f"{num} is a Disarium number.")
else:
    print(f"{num} is not a Disarium number.")

2. Check Harshad Number
A Harshad number (or Niven number) is divisible by the sum of its digits.


def is_harshad(num):
    digit_sum = sum(int(digit) for digit in str(num))
    return num % digit_sum == 0

num = int(input("Enter a number: "))
if is_harshad(num):
    print(f"{num} is a Harshad number.")
else:
    print(f"{num} is not a Harshad number.")

3. Print Exponent Value of x

from math import exp

x = float(input("Enter the value of x: "))
print(f"e^{x} = {exp(x)}")

4. Calculate nCr

from math import factorial

def nCr(n, r):
    return factorial(n) // (factorial(r) * factorial(n - r))

n = int(input("Enter value of n: "))
r = int(input("Enter value of r: "))
print(f"{n}C{r} = {nCr(n, r)}")

5. Print Patterns
Here are 11 patterns implemented in Python:

(a) Right-Angled Triangle of Stars

n = int(input("Enter the number of rows: "))
for i in range(1, n + 1):
    print("*" * i)

(b) Inverted Right-Angled Triangle

n = int(input("Enter the number of rows: "))
for i in range(n, 0, -1):
    print("*" * i)

(c) Pyramid Pattern

n = int(input("Enter the number of rows: "))
for i in range(1, n + 1):
    print(" " * (n - i) + "* " * i)

(d) Inverted Pyramid Pattern

n = int(input("Enter the number of rows: "))
for i in range(n, 0, -1):
    print(" " * (n - i) + "* " * i)

(e) Diamond Pattern

n = int(input("Enter the number of rows: "))
for i in range(1, n + 1):
    print(" " * (n - i) + "* " * i)
for i in range(n - 1, 0, -1):
    print(" " * (n - i) + "* " * i)

(f) Floyd's Triangle

n = int(input("Enter the number of rows: "))
num = 1
for i in range(1, n + 1):
    for j in range(1, i + 1):
        print(num, end=" ")
        num += 1
    print()

(g) Pascal's Triangle

def factorial(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial(n - 1)

n = int(input("Enter the number of rows: "))
for i in range(n):
    for j in range(n - i - 1):
        print(" ", end="")
    for j in range(i + 1):
        print(factorial(i) // (factorial(j) * factorial(i - j)), end=" ")
    print()

(h) Half Pyramid with Numbers

n = int(input("Enter the number of rows: "))
for i in range(1, n + 1):
    print("".join(str(j) for j in range(1, i + 1)))

(i) Inverted Half Pyramid with Numbers

n = int(input("Enter the number of rows: "))
for i in range(n, 0, -1):
    print("".join(str(j) for j in range(1, i + 1)))

(j) Right-Angled Triangle with Increasing Numbers

n = int(input("Enter the number of rows: "))
num = 1
for i in range(1, n + 1):
    for j in range(i):
        print(num, end=" ")
        num += 1
    print()

(k) Butterfly Pattern

n = int(input("Enter the number of rows: "))
for i in range(1, n + 1):
    print("*" * i + " " * (2 * (n - i)) + "*" * i)
for i in range(n - 1, 0, -1):
    print("*" * i + " " * (2 * (n - i)) + "*" * i)
