1. ComplexNumber Class

import math

class ComplexNumber:
    def __init__(self, real, imaginary):
        self.real = real
        self.imaginary = imaginary

    def add(self, other):
        return ComplexNumber(self.real + other.real, self.imaginary + other.imaginary)

    def magnitude(self):
        return math.sqrt(self.real**2 + self.imaginary**2)

    def __str__(self):
        return f"{self.real} + {self.imaginary}i"

# Creating instances
c1 = ComplexNumber(3, 4)
c2 = ComplexNumber(1, 2)

# Performing operations
sum_result = c1.add(c2)

print("Complex Number 1:", c1)
print("Complex Number 2:", c2)
print("Sum:", sum_result)
print("Magnitude of Complex Number 1:", c1.magnitude())
print("Magnitude of Sum:", sum_result.magnitude())

2. Person and Student Classes

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def display(self):
        print(f"Name: {self.name}, Age: {self.age}")

class Student(Person):
    def __init__(self, name, age, student_id):
        super().__init__(name, age)
        self.student_id = student_id

    def show_details(self):
        self.display()
        print(f"Student ID: {self.student_id}")

# Creating an instance
student = Student("Alice", 20, "S123")
student.show_details()

3. Multilevel Inheritance

class Vehicle:
    def info(self):
        print("This is a vehicle")

class Car(Vehicle):
    def car_info(self):
        print("This is a car")

class ElectricCar(Car):
    def battery_info(self):
        print("This car has a battery")

# Demonstrating multilevel inheritance
tesla = ElectricCar()
tesla.info()
tesla.car_info()
tesla.battery_info()

4. Multiple Inheritance with Teacher and Author

class Teacher:
    def description(self):
        print("I am a Teacher")

class Author:
    def description(self):
        print("I am an Author")

class TutorAuthor(Teacher, Author):
    def description(self):
        super(Teacher, self).description()
        super(Author, self).description()

# Creating an instance
tutor_author = TutorAuthor()
tutor_author.description()

5. Hierarchical Inheritance with Animal, Dog, and Cat

class Animal:
    def sound(self):
        print("Animals make sound")

class Dog(Animal):
    def sound(self):
        print("Dog barks")

class Cat(Animal):
    def sound(self):
        print("Cat meows")

# Demonstrating hierarchical inheritance
dog = Dog()
cat = Cat()

dog.sound()
cat.sound()
